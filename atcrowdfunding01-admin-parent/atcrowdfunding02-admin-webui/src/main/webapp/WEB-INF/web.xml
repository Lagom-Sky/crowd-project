<!DOCTYPE web-app PUBLIC
        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
        "http://java.sun.com/dtd/web-app_2_3.dtd" >
<web-app>

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring-persist-*.xml</param-value>
    </context-param>

    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
<!--        设置字符集-->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
<!--        强制请求设置字符集-->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
<!--        强制响应设置字符集-->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
<!--    这个filter要在其他过滤器前面-->
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>


    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-web-mvc.xml</param-value>
        </init-param>
<!--        Servlet默认生命周期中，创建对象是在第一次额接收到请求时-->
<!--        而DispatcherServlet创建对象后有大量的框架需要初始化，不适合在第一次请求时来做-->
<!--        设置load-on-startup是为了让DispatcherServlet在web应用启动时就创建对象，初始化-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.css</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.js</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.gif</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.png</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.eot</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.svg</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.woff2</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.ttf</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.woff</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <url-pattern>*.html</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <url-pattern>*.json</url-pattern>
    </servlet-mapping>





<!--    <servlet-mapping>-->
<!--        <servlet-name>dispatcherServlet</servlet-name>-->
<!--&lt;!&ndash;      <url-pattern>/</url-pattern>配置方式一就是 / 表示拦截所有的请求 &ndash;&gt;-->
<!--        <url-pattern>/</url-pattern>-->
<!--&lt;!&ndash;      <url-pattern>*.html</url-pattern>配置方式二就是 配置请求扩展名-->
<!--           优点1xxx.css,xxx.js,xx.png等等静态资源完全不经过SpringMvc，不需要特殊处理-->
<!--           优点2：可以实现伪静态 表面上访问的是一个静态的Html文件这样的静态资源，实际上是经过java代码运算后的结果-->
<!--                伪静态的作用：给黑客入侵增加难度-->
<!--                            有利于Seo优化，让搜索引擎跟容易找到我们的项目-->
<!--                缺点：-->
<!--                    不符合Restful风格-->

<!--&ndash;&gt;-->
<!--&lt;!&ndash;        <url-pattern>*.json</url-pattern>&ndash;&gt;-->
<!--&lt;!&ndash;        <url-pattern>*.html</url-pattern>&ndash;&gt;-->
<!--&lt;!&ndash;        如果Ajax请求的扩展名是HTML，但实际上返回的数据是json数据，二者的就不匹配了就会返回出现406错误-->
<!--            为了让Ajax请求拿到对应的数据我们json的数据，我们需要配置json扩展名-->
<!--&ndash;&gt;-->

<!--&lt;!&ndash;        &ndash;&gt;-->
<!--    </servlet-mapping>-->
    
</web-app>